import streamlit as st
import requests
import pandas as pd
import re
from datetime import datetime, timedelta
import concurrent.futures
# ==== H√†m l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ Shopee ====
def fetch_live_sessions(cookies, days_ago):
    base_url = "https://creator.shopee.vn/supply/api/lm/sellercenter/liveList/v2"
    headers = {"User-Agent": "Mozilla/5.0", "Accept": "application/json"}
    all_sessions = []

    def get_sessions_for_day(i):
        date_str = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
        params = {
    "page": 1,
    "pageSize": 10,
    "name": "",
    "orderBy": "",
    "sort": "",
    "timeDim": "1d",
    "endDate": date_str  # Ch·ªâ l·∫•y d·ªØ li·ªáu trong ng√†y ƒë√≥
}
        response = requests.get(base_url, params=params, headers=headers, cookies=cookies)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 0 and "list" in data.get("data", {}):
                return [live["sessionId"] for live in data["data"]["list"]]
        return []

    with concurrent.futures.ThreadPoolExecutor() as executor:
        results = executor.map(get_sessions_for_day, range(0, days_ago + 1))

    for result in results:
        all_sessions.extend(result)

    return all_sessions
def fetch_shopee_products(cookies, sessionId):
    base_url = "https://creator.shopee.vn/supply/api/lm/sellercenter/realtime/dashboard/productList?"
    headers = {"User-Agent": "Mozilla/5.0", "Accept": "application/json"}
    
    params = {
    "sessionId": sessionId,
    "productName": "",
    "productListTimeRange": 0,
    "productListOrderBy": "itemSold",
    "sort": "asc",
    "page": 1,
    "pageSize": 10
}
    
    # L·∫•y s·ªë trang t·ªïng c·ªông
    response = requests.get(base_url, params=params, headers=headers, cookies=cookies)
    if response.status_code != 200:
        return []
    
    data = response.json()
    if data.get("code") != 0 or not data.get("data"):
        return []
    
    total_pages = data["data"]["totalPage"]
    all_products = []

    def fetch_page(page):
        """H√†m l·∫•y d·ªØ li·ªáu c·ªßa t·ª´ng trang"""
        params["page"] = page
        response = requests.get(base_url, params=params, headers=headers, cookies=cookies)
        if response.status_code == 200:
            page_data = response.json()
            if page_data.get("code") == 0 and page_data.get("data"):
                return page_data["data"]["list"]
        return []

    # Ch·∫°y ƒëa lu·ªìng ƒë·ªÉ l·∫•y d·ªØ li·ªáu c·ªßa t·ª´ng trang
    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        results = list(executor.map(fetch_page, range(1, total_pages + 1)))
    
    # Gh√©p to√†n b·ªô d·ªØ li·ªáu s·∫£n ph·∫©m l·∫°i
    all_products = [product for sublist in results for product in sublist]

    # X·ª≠ l√Ω d·ªØ li·ªáu s·∫£n ph·∫©m
    return [
        {
            "Index": i + 1,
            "ID": product.get("itemId", "N/A"),
            "·∫¢nh s·∫£n ph·∫©m": f'<img src="https://down-zl-vn.img.susercontent.com/{product["coverImage"]}" width="150">' if "coverImage" in product else "N/A",
            "T√™n s·∫£n ph·∫©m": product.get("title", "Kh√¥ng c√≥ t√™n"),
            "Gi√° th·∫•p nh·∫•t": product.get("minPrice", "N/A"),
            "Gi√° cao nh·∫•t": product.get("maxPrice", "N/A"),
            "S·ªë l·∫ßn nh·∫•p chu·ªôt": product.get("productClicks", 0),
            "CTR (%)": product.get("ctr", 0.0),
            "S·ªë l∆∞·ª£t th√™m v√†o gi·ªè": product.get("atc", 0),
            "ƒê∆°n h√†ng t·∫°o ra": product.get("ordersCreated", 0),
            "Doanh thu": product.get("revenue", 0.0),
            "S·ªë l∆∞·ª£ng b√°n": product.get("itemSold", 0),
            "COR (%)": product.get("cor", 0.0),
            "ƒê∆°n h√†ng x√°c nh·∫≠n": product.get("confirmedOrderCnt", 0),
            "Doanh thu x√°c nh·∫≠n": product.get("confirmedRevenue", 0.0),
            "S·ªë l∆∞·ª£ng b√°n x√°c nh·∫≠n": product.get("confirmedItemSold", 0),
            "COR x√°c nh·∫≠n (%)": product.get("confirmedCor", 0.0),
            "Link Shopee": f'<a href="https://affiliate.shopee.vn/offer/product_offer/{product["itemId"]}" target="_blank">üîó Xem</a>'
        }
        for i, product in enumerate(all_products)
    ]
def extract_number(value):
    """Tr√≠ch xu·∫•t ph·∫ßn s·ªë t·ª´ chu·ªói, b·ªè k√Ω t·ª± kh√¥ng li√™n quan."""
    try:
        return float(re.sub(r"[^\d.]", "", str(value))) if re.sub(r"[^\d.]", "", str(value)) else 0
    except:
        return 0
# ==== Giao di·ªán Streamlit ====
st.set_page_config(page_title="Shopee Product Scraper", layout="wide")
st.title("üì¶ Shopee Product Scraper")
if "df" not in st.session_state:
    st.session_state["df"] = None
if "df_filtered" not in st.session_state:
    st.session_state["df_filtered"] = None

# Nh·∫≠p cookies
st.subheader("üîê Nh·∫≠p Cookies Shopee")
cookies_input = st.text_area("Nh·∫≠p cookies c·ªßa b·∫°n v√†o ƒë√¢y:", height=100,key="cookies_input")
if st.button("L∆∞u Cookies"):
    if cookies_input:
        st.session_state["cookies"] = {"Cookie": cookies_input}
        st.success("‚úÖ Cookies ƒë√£ ƒë∆∞·ª£c l∆∞u!")
    else:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p cookies tr∆∞·ªõc khi l∆∞u.")


st.subheader("üîß Ch·ªçn ch·∫ø ƒë·ªô nh·∫≠p d·ªØ li·ªáu")
option = st.radio("Ch·ªçn c√°ch l·∫•y d·ªØ li·ªáu:", ["Nh·∫≠p sessionId", "L·∫•y theo s·ªë ng√†y"])

session_id = None
days_ago = None

if option == "Nh·∫≠p sessionId":
    session_id = st.text_input("Nh·∫≠p sessionId:")
else:
    days_ago = st.number_input("Nh·∫≠p s·ªë ng√†y tr∆∞·ªõc:", min_value=0, max_value=30, value=1, step=1)




# N·∫øu ch·ªçn ng√†y th√¨ l·∫•y sessionId c·ªßa c√°c phi√™n live
if st.button("L·∫•y d·ªØ li·ªáu") or days_ago !=1:
    if "cookies" not in st.session_state or not st.session_state["cookies"]:
        st.error("‚ùå Ch∆∞a c√≥ cookies! Vui l√≤ng nh·∫≠p v√† l∆∞u cookies tr∆∞·ªõc.")
    else:
        if session_id:
            st.info(f"üì¶ ƒêang l·∫•y s·∫£n ph·∫©m t·ª´ phi√™n live {session_id}...")
            products = fetch_shopee_products(st.session_state["cookies"], session_id)
            df = pd.DataFrame(products)
            st.session_state["df"] = df  # L∆∞u v√†o session state
            df_filtered = df
            df_filtered["Index"] = range(1, len(df_filtered) + 1)
            st.session_state["df_filtered"] = df_filtered
            st.markdown("""
                <style>
                .scroll-table {
                    max-height: 500px;
                    overflow-y: auto;
                    overflow-x: auto;
                    border: 1px solid #ddd;
                    padding: 10px;
                    white-space: nowrap;
                }
                th {
                    position: sticky;
                    top: 0;
                    background: black;
                    z-index: 1;
                }
                td- 1nd-child,th-1nd-child {
                 min-width:200px;   }
                </style>
                """, unsafe_allow_html=True)
                # Hi·ªÉn th·ªã b·∫£ng s·∫£n ph·∫©m
            st.markdown(f'<div class="scroll-table">{df_filtered.to_html(escape=False, index=False)}</div>', unsafe_allow_html=True)
        if days_ago is not None:
            session_ids = fetch_live_sessions(st.session_state["cookies"], days_ago)

            if session_ids:
                st.success(f"‚úÖ T√¨m th·∫•y {len(session_ids)} phi√™n live!")
                all_products = []

                for session_id in session_ids:
                    st.info(f"üì¶ ƒêang l·∫•y s·∫£n ph·∫©m t·ª´ phi√™n live {session_id}...")
                    products = fetch_shopee_products(st.session_state["cookies"], session_id)
                    all_products.extend(products)
        

            if all_products:
                df = pd.DataFrame(all_products)
                st.session_state["df"] = df
                df_filtered=df# L∆∞u v√†o session state
                df_filtered["Index"] = range(1, len(df_filtered) + 1)
                st.session_state["df_filtered"] = df_filtered
                st.markdown("""
                <style>
                .scroll-table {
                    max-height: 500px;
                    overflow-y: auto;
                    overflow-x: auto;
                    border: 1px solid #ddd;
                    padding: 10px;
                    white-space: nowrap;
                }
                th {
                    position: sticky;
                    top: 0;
                    background: black;
                    z-index: 1;
                }
                td- 1nd-child,th-1nd-child {
                 min-width:200px;   }
                </style>
                """, unsafe_allow_html=True)
                # Hi·ªÉn th·ªã b·∫£ng s·∫£n ph·∫©m
                st.markdown(f'<div class="scroll-table">{df_filtered.to_html(escape=False, index=False)}</div>', unsafe_allow_html=True)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong c√°c phi√™n live n√†y.")
df_filtered = st.session_state.get("df_filtered", pd.DataFrame())
if st.session_state["df_filtered"] is not None:
    filter_column = st.selectbox("Ch·ªçn c·ªôt mu·ªën l·ªçc:", df_filtered.columns, key="filter_column")
    sort_order = st.radio("Ch·ªçn ki·ªÉu s·∫Øp x·∫øp:", ["Cao ‚Üí Th·∫•p", "Th·∫•p ‚Üí Cao"], key="sort_order")
    if st.button("üõí L·ªçc gi·ªè live") or filter_column:
        if filter_column in df_filtered.columns: 
            ascending = True if sort_order == "Th·∫•p ‚Üí Cao" else False
            df_filtered = df_filtered.sort_values(by=filter_column, ascending=ascending)
            df_filtered["Index"] = range(1, len(df_filtered) + 1)  # ƒê√°nh l·∫°i s·ªë th·ª© t·ª±

            # L∆∞u l·∫°i d·ªØ li·ªáu ƒë√£ l·ªçc
            st.session_state["df_filtered"] = df_filtered

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.success(f"‚úÖ ƒê√£ l·ªçc theo c·ªôt '{filter_column}' ({sort_order})!")
            st.markdown("""
                <style>
                .scroll-table {
                    max-height: 500px;
                    overflow-y: auto;
                    overflow-x: auto;
                    border: 1px solid #ddd;
                    padding: 10px;
                    white-space: nowrap;
                }
                th {
                    position: sticky;
                    top: 0;
                    background: black;
                    z-index: 1;
                }
                td- 1nd-child,th-1nd-child {
                 min-width:200px;   }
                </style>
                """, unsafe_allow_html=True)
            st.markdown(f'<div class="scroll-table">{df_filtered.to_html(escape=False, index=False)}</div>', unsafe_allow_html=True)

# Xu·∫•t danh s√°ch link n·∫øu nh·∫•n n√∫t
df_filtered = st.session_state.get("df_filtered", None)
df = st.session_state.get("df", None)

# üü¢ N·∫øu c√≥ df_filtered (d·ªØ li·ªáu ƒë√£ l·ªçc), ∆∞u ti√™n d√πng n√≥
df_to_export = df_filtered if df_filtered is not None else df

if df_to_export is not None and not df_to_export.empty:
    if st.button("üì§ Xu·∫•t Link"):
        product_links = "\n".join(re.findall(r'href="([^"]+)"', " ".join(df_to_export["Link Shopee"].tolist())))
        st.text_area("Danh s√°ch link s·∫£n ph·∫©m:", product_links, height=300)

# Xu·∫•t danh s√°ch t√™n s·∫£n ph·∫©m theo index
if df_filtered is not None and not df_filtered.empty:
    st.subheader("üìã Xu·∫•t danh s√°ch t√™n s·∫£n ph·∫©m theo Index")
    start_index = st.number_input("Nh·∫≠p Index b·∫Øt ƒë·∫ßu:", min_value=1, value=1)
    end_index = st.number_input("Nh·∫≠p Index k·∫øt th√∫c:", min_value=1, value=10)
    
    if st.button("üì§ Xu·∫•t T√™n S·∫£n Ph·∫©m"):
        product_names = "\n".join(df_filtered.iloc[start_index-1:end_index]["T√™n s·∫£n ph·∫©m"].tolist())
        st.text_area("Danh s√°ch t√™n s·∫£n ph·∫©m:", product_names, height=300)

# üîÑ N√∫t Refresh ƒë·ªÉ reset d·ªØ li·ªáu g·ªëc
if st.button("üîÑ Refresh"):
    if "df" in st.session_state:
        del st.session_state["df"]
    if "df_filtered" in st.session_state:
        del st.session_state["df_filtered"]
    st.rerun()
